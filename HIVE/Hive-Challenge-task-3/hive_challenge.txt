Scenario Based questions:

Q1. Will the reducer work or not if you use “Limit 1” in any HiveQL query?


Ans- It really depends on what your query is.

For example

If your query is a simple select query then no reducers are called.
Ex. select * from db.table limit 1 
statement never includes reducers , you can check by using

If your query has something like aggregation along with group by or order by and lets say you are using MR as your execution engine then reducers will be called.
Ex. select * from db.table order by column 
uses reducers or whenever there is an aggregation.

If you are using Tez as your execution engine then reducers will most likely not be called because Tez uses a cost bases query optimizer which will try to do things in the map phase itself if the dataset is small and pertaining that there are no joins.

You can always use the explain key word to see what map phases and reduce phase are involved in the query. That’s the best way to determine what goes on in each phase.

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Q2. Suppose I have installed Apache Hive on top of my Hadoop cluster using default metastore configuration. Then, what will happen if we have multiple clients trying to access Hive at the same time? 

Ans- The default metastore configuration allows only one Hive session to be opened at a time for accessing the metastore. Therefore, if multiple clients try to access the metastore at the same time, they will get an error. One has to use a standalone metastore, i.e. Local or remote metastore configuration in Apache Hive for allowing access to multiple clients concurrently. 

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Q3. Suppose, I create a table that contains details of all the transactions done by the customers: CREATE TABLE transaction_details (cust_id INT, amount FLOAT, month STRING, country STRING) ROW FORMAT DELIMITED FIELDS TERMINATED BY ‘,’ ;
Now, after inserting 50,000 records in this table, I want to know the total revenue generated for each month. But, Hive is taking too much time in processing this query. How will you solve this problem and list the steps that I will be taking in order to do so?


Ans- We can solve this problem of query latency by partitioning the table according to each month. So, for each month we will be scanning only the partitioned data instead of whole data sets.

As we know, we can’t partition an existing non-partitioned table directly. So, we will be taking following steps to solve the very problem: 

(1). Create a partitioned table, say partitioned_transaction:
CREATE TABLE partitioned_transaction (cust_id INT, amount FLOAT, country STRING) PARTITIONED BY (month STRING) ROW FORMAT DELIMITED FIELDS TERMINATED BY ‘,’ ; 

(2). Enable dynamic partitioning in Hive:

SET hive.exec.dynamic.partition = true;

SET hive.exec.dynamic.partition.mode = nonstrict;

(3). Transfer the data from the non – partitioned table into the newly created partitioned table:

INSERT OVERWRITE TABLE partitioned_transaction PARTITION (month) SELECT cust_id, amount, country, month FROM transaction_details;

Now, we can perform the query using each partition and therefore, decrease the query time.

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Q4. How can you add a new partition for the month December in the above partitioned table?

Ans- For adding a new partition in the above table partitioned_transaction, we will issue the command give below:

ALTER TABLE partitioned_transaction ADD PARTITION (month=’Dec’) LOCATION  ‘/partitioned_transaction’;

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Q5. I am inserting data into a table based on partitions dynamically. But, I received an error – FAILED ERROR IN SEMANTIC ANALYSIS: Dynamic partition strict mode requires at least one static partition column. How will you remove this error?

Ans- To remove this error one has to execute following commands:

SET hive.exec.dynamic.partition = true;
SET hive.exec.dynamic.partition.mode = nonstrict;

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Q6. Suppose, I have a CSV file – ‘sample.csv’ present in ‘/temp’ directory with the following entries:
id first_name last_name email gender ip_address
How will you consume this CSV file into the Hive warehouse using built-in SerDe?

Ans- SerDe stands for serializer/deserializer. A SerDe allows us to convert the unstructured bytes into a record that we can process using Hive. SerDes are implemented using Java. Hive comes with several built-in SerDes and many other third-party SerDes are also available. 

Hive provides a specific SerDe for working with CSV files. We can use this SerDe for the sample.csv by issuing following commands:

CREATE EXTERNAL TABLE sample

(id int, first_name string, 

last_name string, email string,

gender string, ip_address string) 

ROW FORMAT SERDE ‘org.apache.hadoop.hive.serde2.OpenCSVSerde’ 

STORED AS TEXTFILE LOCATION ‘/temp’;

Now, we can perform any query on the table ‘sample’:

SELECT first_name FROM sample WHERE gender = ‘male’;

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Q7. Suppose, I have a lot of small CSV files present in the input directory in HDFS and I want to create a single Hive table corresponding to these files. The data in these files are in the format: {id, name, e-mail, country}. Now, as we know, Hadoop performance degrades when we use lots of small files.
So, how will you solve this problem where we want to create a single Hive table for lots of small files without degrading the performance of the system?


Ans- One can use the SequenceFile format which will group these small files together to form a single sequence file. The steps that will be followed in doing so are as follows:

Create a temporary table:
CREATE TABLE temp_table (id INT, name STRING, e-mail STRING, country STRING)
ROW FORMAT FIELDS DELIMITED TERMINATED BY ‘,’ STORED AS TEXTFILE;

Load the data into temp_table:
LOAD DATA INPATH ‘/input’ INTO TABLE temp_table;

Create a table that will store data in SequenceFile format:
CREATE TABLE sample_seqfile (id INT, name STRING, e-mail STRING, country STRING)

ROW FORMAT FIELDS DELIMITED TERMINATED BY ‘,’ STORED AS SEQUENCEFILE;

Transfer the data from the temporary table into the sample_seqfile table:
INSERT OVERWRITE TABLE sample SELECT * FROM temp_table;

Hence, a single SequenceFile is generated which contains the data present in all of the input files and therefore, the problem of having lots of small files is finally eliminated.

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Q8. LOAD DATA LOCAL INPATH ‘Home/country/state/’
OVERWRITE INTO TABLE address;

The following statement failed to execute. What can be the cause?

Ans- The local inpath should contain a file and not a directory. The $env:HOME is a valid variable available in the hive environment.

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Q9. Is it possible to add 100 nodes when we already have 100 nodes in Hive? If yes, how?

Ans- Yes, we can add the nodes by following the below steps:

Step 1: Take a new system; create a new username and password
Step 2: Install SSH and with the master node setup SSH connections
Step 3: Add ssh public_rsa id key to the authorized keys file
Step 4: Add the new DataNode hostname, IP address, and other details in /etc/hosts slaves file:

192.168.1.102 slave3.in slave3
Step 5: Start the DataNode on a new node
Step 6: Login to the new node like suhadoop or:

ssh -X hadoop@192.168.1.103
Step 7: Start HDFS of the newly added slave node by using the following command:

./bin/hadoop-daemon.sh start data node
Step 8: Check the output of the jps command on the new node


####################################################################################
                           Hive Practical questions:
####################################################################################

Hive Join operations

Create a  table named CUSTOMERS(ID | NAME | AGE | ADDRESS   | SALARY)
Create a Second  table ORDER(OID | DATE | CUSTOMER_ID | AMOUNT
)




create database hive_challenge;

use hive_challenge;

#create customers table

create table CUSTOMERS
    > (
    > id int,
    > name string,
    > age int,
    > address string,
    > salary int)
    > row format delimited
    > fields terminated by ',';

load data local inpath 'file:///tmp/hive_class/customers.csv' into table customers;


#create ORDER table

create table ORDER
    > (
    > oid int,
    > date date,
    > customer_id int,
    > amount int
    > )
    > row format delimited
    > fields terminated by ',';


load data local inpath 'file:///tmp/hive_class/order.csv' into table order;



#create buck_customers table

create table buck_customers
     (
     id int,
     name string,
     age int,
     address string,
     salary int
     )
     clustered by (id)
     sorted by (id)
     into 2 buckets;

#load into buck_customers from customers table
insert overwrite table buck_customers select * from customers;


#create buck_order table

create table buck_order
     (
     oid int,
     date date,
     customer_id int,
     amount int
     )
     clustered by (oid)
     sorted by (oid)
     into 2 buckets;
    
#load into buck_order from order table
insert overwrite table buck_order select * from order;



1. Reduce-Side Join
SET hive.auto.convert.join=false;
SELECT * FROM buck_customers c INNER JOIN buck_order o ON c.id = o.customer_id;
 
1	Ajay	28	Indore	100	1	2021-02-25	1	30
2	Amit	25	Chhindwara	200	2	2022-04-29	2	50
3	Sumit	23	Delhi	300	3	2022-05-19	3	70
5	Ravi	24	Pune	300	4	2022-06-10	5	40
6	Hariom	22	Agra	700	5	2022-07-15	6	80


2.Map Side Join

SET hive.auto.convert.join=true;
SELECT * FROM buck_customers c INNER JOIN buck_order o ON c.id = o.customer_id;

6	Hariom	22	Agra	700	5	2022-07-15	6	80
2	Amit	25	Chhindwara	200	2	2022-04-29	2	50
5	Ravi	24	Pune	300	4	2022-06-10	5	40
3	Sumit	23	Delhi	300	3	2022-05-19	3	70
1	Ajay	28	Indore	100	1	2021-02-25	1	30


3.Bucket Map Join

set hive.optimize.bucketmapjoin=true;
SET hive.auto.convert.join=true;
SELECT * FROM buck_customers c INNER JOIN buck_order o ON c.id = o.customer_id;

6	Hariom	22	Agra	700	5	2022-07-15	6	80
2	Amit	25	Chhindwara	200	2	2022-04-29	2	50
5	Ravi	24	Pune	300	4	2022-06-10	5	40
3	Sumit	23	Delhi	300	3	2022-05-19	3	70
1	Ajay	28	Indore	100	1	2021-02-25	1	30


4. Sorted Merge Bucket Map Join

set hive.enforce.sortmergebucketmapjoin=false;
set hive.auto.convert.sortmerge.join=true;
set hive.optimize.bucketmapjoin = true;
set hive.optimize.bucketmapjoin.sortedmerge = true;
SELECT * FROM buck_customers c INNER JOIN buck_order o ON c.id = o.customer_id;

6	Hariom	22	Agra	700	5	2022-07-15	6	80
2	Amit	25	Chhindwara	200	2	2022-04-29	2	50
5	Ravi	24	Pune	300	4	2022-06-10	5	40
3	Sumit	23	Delhi	300	3	2022-05-19	3	70
1	Ajay	28	Indore	100	1	2021-02-25	1	30




BUILD A DATA PIPELINE WITH HIVE





create table AirQualityUCI
     (
     date string,
     time string,
     co string,
     pt string,
     nmhc int,
     c6h6 string,
     pt08_s2 int,
     nox int,
     pt08_s3 int,
     no2 int,
     pt08_s4 int,
     pt08_s5 int,
     t string,
     rh string,
     ah string,
     blanck_col string
     )
     row format serde 'org.apache.hadoop.hive.serde2.OpenCSVSerde' 
     with serdeproperties ( 
     "separatorChar" = "\073" 
     )
     stored as textfile
     tblproperties ("skip.header.line.count" = "1"); 

